{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addTokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "addTokenB",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountAIn",
						"type": "uint256"
					}
				],
				"name": "swapAforB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountBIn",
						"type": "uint256"
					}
				],
				"name": "swapBforA",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Token contract for Eth course - Hugo Jaca Funciones:      Constructor. Inicializa la subasta con los par치metros necesario para su funcionamiento. Eventos:      Crear dos tokens ERC-20 simples: Los contrato de los tokens deben tener obligatoriamente los nombres TokenA y TokenB.      Implementar un contrato de exchange (denominado obligatoriamente SimpleDEX) que:         Mantenga un pool de liquidez para TokenA y TokenB.         Utilice la f칩rmula del producto constante (x+dx)(y-dy) = xy para calcular los precios de intercambio.         Permita a침adir y retirar liquidez.         Permita intercambiar TokenA por TokenB y viceversa.      El contrato SimpleDEX debe contar obligatoriamente y sin modificaci칩n de la interface con las siguientes funciones:         constructor(address _tokenA, address _tokenB)         addLiquidity(uint256 amountA, uint256 amountB)         swapAforB(uint256 amountAIn)         swapBforA(uint256 amountBIn)         removeLiquidity(uint256 amountA, uint256 amountB)         getPrice(address _token)      Incluir los eventos que consideren convenientes.",
			"kind": "dev",
			"methods": {},
			"title": "DEX ",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Dex_flattened.sol": "SimpleDEX"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Dex_flattened.sol": {
			"keccak256": "0xa3cf76fbfbcbdaa95599cc8f30d46c982fd1f5da053feca68bb8ed295d5e748c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://832e71b00d49767333fa86d57ff21800c316ea47dc9df082756e77cff14ff35c",
				"dweb:/ipfs/QmTivwofisyLr1N9VExxzPKdGvFzEhSSB2rR8yx5m3PJ4x"
			]
		}
	},
	"version": 1
}